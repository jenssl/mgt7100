pacman::p_load (correlation,corrplot,corrr,ggcorrplot,ggplot2,ggpubr,dplyr,ggpubr, psych,rcompanion,tidyverse, MASS, magrittr, ISLR)
# PLOT MANIPULATION
fun_grob <- function(){
grid.echo()
grid.grab()
}
mds_hypercube_d5 <-read.clipboard(header="true")
as.table(	SLC	NYC	San-Diego	Seatle	Miami
tab <- matrix(c(0,	2179,	756,	840,	2535, 2179,	0,	2828,	2894,	1281, 756,	2828,	0,	1256,	2657, 840, 2894,	1256,	0,	3332,	2535,	1281,	2657,	3332,	0), ncol=5, byrow=TRUE)
colnames(tab) <- c('SLC','NYC','San-Diego', 'Seattle', 'Miami')
rownames(tab) <- c('SLC','NYC','San-Diego', 'Seattle', 'Miami')
tab <- as.table(tab)
(tab)
mds_cities <- tab
mds_cities_d2 <-cmdscale(mds_cities, k=2)
round(mds_cities_d2, 2)
plot(mds_cities_d2,type="n", xlab="Dimension 1", ylab="Dimension 2",main ="Cities")
text(mds_cities_d2,labels=names(mds_cities))
fun_grob_out <- fun_grob()
fun_grob <- function(){
grid.echo()
grid.grab()
}
fun_grob_out <- fun_grob()
fun_grob_out <- fun_grob()
fun_grob_out <- fun_grob()
fun_grob_out <- fun_grob(mds_cities_d2)
fun_grob_out <- fun_grob()
grid.newpage()
# PLOT MANIPULATION
library (gridGraphics)
fun_grob_out <- fun_grob()
View(fun_grob)
pushViewport(viewport(width = 0.6,
height = 0.6,
angle = 150))
grid.draw(fun_grob_out)
grid.echo(function() plot(...))
grid.echo(function() plot())
mds_cities_d2 <-cmdscale(mds_cities, k=2)
round(mds_cities_d2, 2)
plot(mds_cities_d2,type="n", xlab="Dimension 1", ylab="Dimension 2",main ="Cities")
text(mds_cities_d2,labels=names(mds_cities))
grid.newpage()
pushViewport(viewport(width = 0.6,
height = 0.6,
angle = 150))
grid.draw(fun_grob_out)
grid.echo(function() plot())
plot(mds_cities_d2,type="n", xlab="Dimension 1", ylab="Dimension 2",main ="Cities")
text(mds_cities_d2,labels=names(mds_cities))
fun_grob_out <- fun_grob(X)
scree.plot(dist(mds_cities_d2), k=3)
scree.plot(dist("mds_cities_d2"), k=3)
scree.plot(dist(tab), k=3)
summary (pr.out21)
data2 <- read_csv("data2.csv")
View(data2)
#2a) What steps did you take (and what statistical methods did you employ) in analyzing this data?
##make some histograms of data
hist(data2$unpleasant) #a bit skewed
hist(data2$difficult) #a bit right skewed
hist(data2$bore) #not looking normally distributed
shapiro.test(data2$unpleasant)
shapiro.test(data2$difficult)
shapiro.test(data2$bore)
## so actually all the shapiro tests are good (non-significant- won't transform the data
## Plot the data and do ablines- all the data seems pretty correlated.
plot1 <- data2 %>%
ggplot(aes(difficult, unpleasant)) +
geom_point ()+
geom_abline() +
theme_classic ()
(plot1)
plot2 <- data2 %>%
ggplot(aes(difficult, bore)) +
geom_point ()+
geom_abline() +
theme_classic ()
(plot2)
plot3 <- data2 %>%
ggplot(aes(bore, unpleasant)) +
geom_point ()+
geom_abline() +
theme_classic ()
(plot3)
# Do multidimensional scaling
data2_mds <- data2 %>%
dist() %>%
cmdscale() %>%
as_tibble()
colnames(data2_mds) <- c("Dim.1", "Dim.2")
# Plot MDS
ggscatter(data2_mds, x = "Dim.1", y = "Dim.2",
label = rownames(data2),
size = 1,
repel = TRUE)
data2_cluster <- kmeans(data2_mds, 3)$cluster %>%
as.factor()
data2_forplot <- data2_mds %>%
mutate(groups = data2_cluster)
# plot the clusters
ggscatter(data2_forplot, x = "Dim.1", y = "Dim.2",
label = rownames(data2),
color = "groups",
palette = "jco",
size = 1,
ellipse = TRUE,
ellipse.type = "convex",
repel = TRUE)
##Okay, I see 2 main clusters and a weird little cluster between the items "confrontation" and "badnews". Let's do PCA next.
##PCA
data2_edited <- data2[, -c(1)]
pr.out21<- prcomp(data2_edited, scale=TRUE)
summary (pr.out21)
var_explained = pr.out21$sdev^2 / sum(pr.out21$sdev^2)
screep <- qplot(c(1:4), var_explained) +
geom_line() +
xlab("Principal Component") +
ylab("Variance Explained") +
ggtitle("Scree Plot") +
ylim(0, 1)
(screep)
screep <- qplot(c(1:4), var_explained) +
geom_line() +
xlab("Principal Component") +
ylab("Variance Explained") +
ggtitle("Scree Plot") +
ylim(0, 4)
(screep)
rlang::last_error()
screep <- qplot(c(1:5), var_explained) +
geom_line() +
xlab("Principal Component") +
ylab("Variance Explained") +
ggtitle("Scree Plot") +
ylim(0, 1)
(screep)
#create scree plot
length(var_explained)
screep <- qplot(c(1:3), var_explained) +
geom_line() +
xlab("Principal Component") +
ylab("Variance Explained") +
ggtitle("Scree Plot") +
ylim(0, 1)
(screep)
print(var_explained)
var_explained = pr.out$sdev^2 / sum(pr.out$sdev^2)
screep1 <- qplot(c(1:3), var_explained) +
geom_line() +
xlab("Principal Component") +
ylab("Variance Explained") +
ggtitle("Scree Plot") +
ylim(0, 1)
(screep1)
#create scree plot
length(var_explained) #this is so you know what to put in "c(1:3)"
screep1 <- qplot(c(1:15), var_explained) +
geom_line() +
xlab("Principal Component") +
ylab("Variance Explained") +
ggtitle("Scree Plot") +
ylim(0, 1)
(screep1)
library(igraph)
#this makes lines:
install.packages("igraph")
#this makes lines:
install.packages("igraph")
library(igraph)
g <- graph.full(nrow(mds_cities_d2))
V(g)$label <- mds_cities
layout <- layout.mds(g, dist = as.matrix(mds_cities_d2))
mds_cities_d2 <-cmdscale(mds_cities, k=2)
round(mds_cities_d2, 2)
library(igraph)
g <- graph.full(nrow(mds_cities))
V(g)$label <- mds_cities
layout <- layout.mds(g, dist = as.matrix(mds_cities))
plot(g, layout = layout, vertex.size = 3)
#create scree plot
scree.plot(dist(mds_cities), k=3) #Bryan
#create scree plot
scree.plot(dist(mds_cities_d2), k=3) #Bryan
plot(mds_cities_d2,type="n", xlab="Dimension 1", ylab="Dimension 2",main ="Cities")
text(mds_cities_d2,labels=names(mds_cities))
fun_grob_out <- fun_grob()
plotfun <- function() plot(1:10)
grid.echo(plotfun)
fun_grob_out <- fun_grob()
grid.echo(fun_grob())
fun_grob_out <- fun_grob()
setwd("~/GitHub/mgt7100/mgt7100")
#load data
class_data <- read_xls("tfi_data.xlsx")
#load data
class_data <- read_excel("tfi_data.xlsx")
#load libraries
pacman::p_load (correlation,corrplot,corrr,ggcorrplot,ggplot2,ggpubr,dplyr,ggpubr, psych,rcompanion,tidyverse, readr, readxl)
#load libraries
pacman::p_load (correlation,corrplot,corrr,ggcorrplot,ggplot2,ggpubr,dplyr,ggpubr, psych,rcompanion,tidyverse, readr, readxl)
#load data
class_data <- read_excel("tfi_data.xlsx")
tfi_data <- read_excel("tfi_data.xlsx")
View(tfi_data)
tfi_data <- read_excel("tfi_data.xlsx")
View(tfi_data)
tfi_data <- read_excel("tfi_data.xlsx")
View(tfi_data)
#age
data1 <- read_csv("data1.csv")
tfi_data <- read_excel("tfi_data.xlsx")
View(tfi_data)
#age
data1 <- read_csv("data1.csv")
summary (tfi_data$age) #-----
sd(tfi_data$age) #----
tfi_data <- read_excel("tfi_data.xlsx")
#age
summary (tfi_data$age) #82.36
sd(tfi_data$age)
sd(tfi_data$age, na.rm=TRUE) #----
tfi_data %>%
count(gender)
#select columns for just the items
items <-class_data[, c(4:18)]
corr_items <- cor(items, use="pairwise.complete.obs") #excludes NA
View(items)
#load data
tfi_data <- read_excel("tfi_data.xlsx")
#select columns for just the items
items <-class_data[, c(4:18)]
corr_items <- cor(items, use="pairwise.complete.obs") #excludes NA
#load data
tfi_data <- read_excel("tfi_data.xlsx")
#select columns for just the items
items <-class_data[, c(4:18)]
View(items)
#select columns for just the items
items <-class_data[, c(4:18)] %>%
slice(-c(2))
items <-class_data[, c(4:18)] %>%
slice(-c(1))
corr_items <- cor(items, use="pairwise.complete.obs") #excludes NA
items <-class_data[, as.numeric(c(4:18))] %>%
slice(-c(1))
corr_items <- cor(items, use="pairwise.complete.obs") #excludes NA
items[1:15] <- lapply(items[1:15], FUN = function(y){as.numeric(y)})
corr_items <- cor(items, use="pairwise.complete.obs") #excludes NA
(corr_items)
pvalues <- cor_pmat(items) #this produces the p-values of the correlations
pvalues2 <- round(cor_pmat(items), 2) #rounded to 2 decimal places
(pvalues)
corrplot (corr_items, method= "number")
ggcorrplot(corr_items, hc.order=TRUE, lab=TRUE)
#make correlation matrix
corrplot (corr_items, method= "number", addCoef.col = 1, number.cex = 0.5)
ggcorrplot(corr_items, hc.order=TRUE, lab=TRUE, addCoef.col = 1, number.cex = 0.5)
ggcorrplot(corr_items, hc.order=TRUE, lab=TRUE)
ggcorrplot(corr_items, outline.col="white", hc.order=TRUE, lab=TRUE,
show.diag=FALSE)
ggcorrplot(corr_items,
outline.col="white",
hc.order=TRUE,
lab=TRUE,
lab_size=2,
show.diag=FALSE)
#make correlation matrix
corrplot (corr_items, method= "number", addCoef.col = 1, number.cex = 0.5)
ggcorrplot(corr_items,
outline.col="white",
hc.order=TRUE,
lab=TRUE,
lab_size=2,
p.mat=pvalues2,
show.diag=FALSE)
ggcorrplot(corr_items,
outline.col="white",
hc.order=TRUE,
lab=TRUE,
lab_size=2,
p.mat=pvalues2,
type="lower")
ggcorrplot(corr_items,
outline.col="white",
hc.order=TRUE,
lab=TRUE,
lab_size=2,
p.mat=p.mat,
type="lower")
ggcorrplot(corr_items,
outline.col="white",
hc.order=TRUE,
lab=TRUE,
lab_size=2,
p.mat=pvalues,
type="lower")
#make correlation matrix
corrplot (corr_items, method= "number", hc.order=TRUE, addCoef.col = 1, number.cex = 0.5)
hclust <- hclust(as.dist(corr_items), method = 'complete')
plot(hclust)
#cut dendrogram (it looked like 4 groups which is why I went w/ K=4)
cutree(hclust, 4)
hclust <- hclust(as.dist(corr_items), method = 'single')
plot(hclust)
pr.out=prcomp(corr_items, scale=TRUE)
summary (pr.out)
items_mds <- items %>%
dist() %>%
cmdscale() %>%
as_tibble()
colnames(itsm_mds) <- c("Dim.1", "Dim.2")
colnames(items_mds) <- c("Dim.1", "Dim.2")
clust <- kmeans(items_mds, 3)$cluster %>%
as.factor()
items_mds2 <- items_mds %>%
mutate(groups = clust)
ggscatter(items_mds2, x = "Dim.1", y = "Dim.2",
label = rownames(items_mds),
color = "groups",
palette = "jco",
size = 1,
ellipse = TRUE,
ellipse.type = "convex",
repel = TRUE)
View(items_mds2)
pr.out<- prcomp(items, scale=TRUE)
summary (pr.out)
var_explained = pr.out$sdev^2 / sum(pr.out$sdev^2)
length(var_explained)
screep1 <- qplot(c(1:15), var_explained) +
geom_line() +
xlab("Principal Component") +
ylab("Variance Explained") +
ggtitle("Scree Plot") +
ylim(0, 1)
(screep1)
pr.out$center
pr.out$scale
head(as.matrix(scale(items)) %*% pr.out$rotation)
dim(pr.out$x)
biplot(pr.out, scale=0)
biplot(pr.out, scale=10)
biplot(pr.out, scale=100)
biplot(pr.out, scale=20)
biplot(pr.out, scale=1)
biplot(pr.out, scale=.5)
biplot(pr.out, scale=.25)
biplot(pr.out, scale=-1)
biplot(pr.out, scale=-5)
biplot(pr.out, scale=0)
#create scree plot
length(var_explained)
length(var_explained)
screep1 <- qplot(c(1:15), var_explained) +
geom_line() +
xlab("Principal Component") +
ylab("Variance Explained") +
ggtitle("Scree Plot") +
ylim(0, 1)
(screep1)
screep1 <- qplot(c(1:15), var_explained) +
geom_line() +
xlab("Principal Component") +
ylab("Variance Explained") +
ggtitle("Scree Plot") +
ylim(0, .55)
(screep1)
screep1 <- qplot(c(1:15), var_explained) +
geom_line() +
xlab("Principal Component") +
ylab("Variance Explained") +
ggtitle("Scree Plot") +
ylim(0, .5)
(screep1)
fa.diagram(items)
items_diagram <- fa(items,3,n.obs=159)
fa.diagram(items_diagram)
#diagram is interesting
items_diagram <- fa(items,3,n.obs=159, fm="pa")
#diagram is interesting
items_diagram <- fa(corr_items,2,n.obs=159)
fa.diagram(items_diagram)
items_diagram <- fa(corr_items,3,n.obs=159)
fa.diagram(items_diagram)
items_diagram <- fa(items,3,n.obs=159)
fa.diagram(items_diagram)
items_mds3 <-cmdscale(items, k=3)
View(items_mds2)
items3 = as.matrix(items)
View(items3)
items_mds <- items %>%
dist() %>%
cmdscale()
items3 <- items %>%
dist() %>%
cmdscale() %>%
as.matrix()
View(items3)
items_mds3 <-cmdscale(items3, k=3)
distance <- dist(items, method = "euclidean", diag = FALSE, upper = FALSE, p = 2)
items_mds3 <-cmdscale(distance, k=2)
round(items_mds3, 2)
plot(items_mds3,type="n", xlab="Dimension 1", ylab="Dimension 2",main ="Items")
text(items_mds3,labels=names(items))
fun_grob_out <- fun_grob()
library(pca3d)
install.packages("pca3d")
install.packages("pca3d")
ibrary(pca3d)
library(pca3d)
pca <- prcomp(items[,-1], scale.=TRUE)
gr <- factor(items[,1])
summary(gr)
pca3d(pca, group=gr)
pca <- prcomp(items, scale.=TRUE)
gr <- factor(items)
summary(gr)
pca3d(pca, group=gr)
pca <- prcomp(distance, scale.=TRUE)
gr <- factor(distance)
pca3d(pca, group=gr)
pca <- prcomp(items_mds2, scale.=TRUE)
pca <- prcomp(distance, scale.=TRUE, drop=F)
gr <- factor(distance)
pca3d(pca, group=gr)
#now I try yet another thing...
prin_comp <- prcomp(items, rank. = 3)
components <- prin_comp[["x"]]
components <- data.frame(components)
components$PC2 <- -components$PC2
components$PC3 <- -components$PC3
tot_explained_variance_ratio <- summary(prin_comp)[["importance"]]['Proportion of Variance',]
tot_explained_variance_ratio <- 100 * sum(tot_explained_variance_ratio)
tit = 'Plot by first 3 components'
fig <- plot_ly(components, x = ~PC1, y = ~PC2, z = ~PC3, color = ~iris$Species, colors = c('#636EFA','#EF553B','#00CC96') ) %>%
add_markers(size = 12)
last.error()
fig <- plot_ly(components, x = ~PC1, y = ~PC2, z = ~PC3, color = ~iris$Species, colors = c('#636EFA','#EF553B','#00CC96') )
#now I try yet another thing...
library(plotly)
#now I try yet another thing...
install.packages("plotly")
library(plotly)
fig <- plot_ly(components, x = ~PC1, y = ~PC2, z = ~PC3, color = ~iris$Species, colors = c('#636EFA','#EF553B','#00CC96') )
fig <- fig %>%
layout(
title = tit,
scene = list(bgcolor = "#e5ecf6")
)
fig
X <- subset (items, select = -c(Q1_1))
prin_comp <- prcomp(X, rank. = 3)
components <- prin_comp[["x"]]
components <- data.frame(components)
components$PC2 <- -components$PC2
components$PC3 <- -components$PC3
components = cbind(components, items$Q1_1)
tot_explained_variance_ratio <- summary(prin_comp)[["importance"]]['Proportion of Variance',]
tot_explained_variance_ratio <- 100 * sum(tot_explained_variance_ratio)
tit = 'Plot by first 3 components'
fig <- plot_ly(components, x = ~PC1, y = ~PC2, z = ~PC3, color = ~iris$Species, colors = c('#636EFA','#EF553B','#00CC96') )
fig <- fig %>%
layout(
title = tit,
scene = list(bgcolor = "#e5ecf6")
)
fig
View(pca)
#X <- subset (items, select = -c(Q1_1))
prin_comp <- prcomp(items, scale=TRUE, rank. = 3)
components <- prin_comp[["x"]]
components <- data.frame(components)
components$PC2 <- -components$PC2
components$PC3 <- -components$PC3
#components = cbind(components, items$Q1_1)
tot_explained_variance_ratio <- summary(prin_comp)[["importance"]]['Proportion of Variance',]
tot_explained_variance_ratio <- 100 * sum(tot_explained_variance_ratio)
tit = 'Plot by first 3 components'
fig <- plot_ly(components, x = ~PC1, y = ~PC2, z = ~PC3, color = ~iris$Species, colors = c('#636EFA','#EF553B','#00CC96') )
fig <- fig %>%
layout(
title = tit,
scene = list(bgcolor = "#e5ecf6")
)
fig
b <- plotly_build(p)
fig <- plot_ly(components, type= "scatter3d", x = ~PC1, y = ~PC2, z = ~PC3, color = ~items, colors = c('#636EFA','#EF553B','#00CC96') )
fig <- fig %>%
layout(
title = tit,
scene = list(bgcolor = "#e5ecf6")
)
fig
fig
fig <- plot_ly(components, type= "scatter3d", x = ~PC1, y = ~PC2, z = ~PC3, colors = c('#636EFA','#EF553B','#00CC96') )
fig <- fig %>%
layout(
title = tit,
scene = list(bgcolor = "#e5ecf6")
)
fig
fig <- plot_ly(components, type= "scatter3d", mode = 'lines+markers', x = ~PC1, y = ~PC2, z = ~PC3, colors = c('#636EFA','#EF553B','#00CC96') )
fig <- fig %>%
layout(
title = tit,
scene = list(bgcolor = "#e5ecf6")
)
fig
library(rgl)
fig
